name: Continuous Deployment

on:
  workflow_run:
    workflows: ["Continuous Integration"]
    types:
      - completed

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Clonar el repositorio
      - name: Checkout repository
        uses: actions/checkout@v4

      # Paso 2: Obtener la versión más alta desde Docker Hub
      - name: Get the highest version from DockerHub
        id: get_version
        run: |
          # Consultar los tags existentes de la imagen en Docker Hub
          response=$(curl -s https://hub.docker.com/v2/repositories/${{ secrets.DOCKER_USERNAME }}/reydefrancia_nextsj/tags/)
          
          # Filtrar los tags que siguen el formato v<major>.<minor> y extraer solo los números
          tags=$(echo $response | jq -r '.results[] | select(.name | test("^v[0-9]+\\.[0-9]+$")) | .name' | sed 's/^v//')

          # Si no hay tags, empezar desde v1.0
          if [ -z "$tags" ]; then
            NEW_VERSION="v1.0"
          else
            # Obtener el tag más alto y extraer la parte mayor y menor
            highest_version=$(echo "$tags" | sort -V | tail -n 1)
            MAJOR=$(echo $highest_version | cut -d. -f1)
            MINOR=$(echo $highest_version | cut -d. -f2)
            # Incrementar la versión menor
            NEW_MINOR=$((MINOR + 1))
            NEW_VERSION="v${MAJOR}.${NEW_MINOR}"
          fi
          
          # Salida de la versión a usar
          echo "next=$NEW_VERSION" >> $GITHUB_OUTPUT

      # Paso 3: Iniciar sesión en Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Paso 4: Construir y subir la imagen Docker con versión y latest
      - name: Build and push Docker image with version and latest tags
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/reydefrancia_nextsj:latest
            ${{ secrets.DOCKER_USERNAME }}/reydefrancia_nextsj:${{ steps.get_version.outputs.next }}
          load: false
          no-cache: false
          pull: false

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      # 1. Conectar a EC2 y desplegar la aplicación
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            # Actualizar el sistema y asegurarse de que Docker esté instalado
            sudo yum update -y
            sudo yum install -y docker
            sudo service docker start
            
            # Descargar la última imagen desde Docker Hub (usando el tag latest)
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/reydefrancia_nextsj:latest

            # Detener y eliminar cualquier contenedor previo
            sudo docker ps -q --filter "name=reydefrancia" | grep -q . && \
            sudo docker stop reydefrancia && \
            sudo docker rm reydefrancia || true

            # Ejecutar el contenedor con el tag latest
            sudo docker run -d --name reydefrancia -p 80:3000 ${{ secrets.DOCKER_USERNAME }}/reydefrancia_nextsj:latest